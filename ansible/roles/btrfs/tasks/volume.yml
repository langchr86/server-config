- ansible.builtin.set_fact:
    device_list_string: "{{ volume.devices | join(' ') }}"

- name: "Ensure filesystem with label: '{{ volume.label }}' not already existing"
  ansible.builtin.command: "blkid --label {{ volume.label }}"
  register: blkid
  changed_when: false
  failed_when: false
  ignore_errors: true
  no_log: true

# for options see: https://btrfs.wiki.kernel.org/index.php/Manpage/mkfs.btrfs
- name: "Create btrfs filesystem on devices: '{{ device_list_string }}'. Use 'wipefs -a <path>' to clean a not empty device."
  become: true
  ansible.builtin.command: >
    mkfs.btrfs
    {{ volume.mkfs_options | default('--data single') }}
    --label {{ volume.label }} {{ device_list_string }}
  when: blkid.rc != 0
  changed_when: true

- name: "Create mount point directory: '{{ volume.mount_path }}'"
  become: true
  ansible.builtin.file:
    path: "{{ volume.mount_path }}"
    state: directory
    mode: "u+rw"

- name: "Mount filesystem with label: '{{ volume.label }}' at '{{ volume.mount_path }}'"
  become: true
  ansible.posix.mount:
    src: 'LABEL={{ volume.label }}'
    path: '{{ volume.mount_path }}'
    fstype: btrfs
    state: mounted

- name: "Ensure volume '{{ volume.mount_path }}' is accessible by user '{{ ansible_env.USER }}'"
  become: true
  ansible.builtin.file:
    path: '{{ volume.mount_path }}'
    owner: '{{ ansible_env.USER }}'
    mode: '0775'

- ansible.builtin.import_tasks: tasks/volume-status.yml

- ansible.builtin.import_tasks: tasks/quota.yml

- ansible.builtin.set_fact:
    subvolumes_dir: "{{ volume.mount_path }}/subvolumes"

- name: "Create subvolumes directory: '{{ subvolumes_dir }}'"
  become: true
  ansible.builtin.file:
    path: "{{ subvolumes_dir }}"
    state: directory
    mode: "u+rw"

- ansible.builtin.include_tasks: tasks/subvolume.yml
  with_items: "{{ volume.subvolumes }}"
  loop_control:
    loop_var: subvolume
